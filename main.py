import os
import logging
import random
import datetime
import re

from flask import Flask
from threading import Thread

from telegram import (
    Update,
    BotCommand,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)


# ------------------------------------------------------------------------
# 1) –ß–¢–ï–ù–ò–ï TOKEN –ò–ó –û–ö–†–£–ñ–ï–ù–ò–Ø
# ------------------------------------------------------------------------
BOT_TOKEN = os.getenv("token_on")
if not BOT_TOKEN:
    raise ValueError("No token_on found in environment variables!")


# ------------------------------------------------------------------------
# 2) FLASK (–º–∏–Ω–∏-—Å–µ—Ä–≤–µ—Ä) - KEEP ALIVE
# ------------------------------------------------------------------------
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "–Ø –∂–∏–≤!"

def run_server():
    port = int(os.getenv("PORT", "8080"))  # Railway provides PORT
    flask_app.run(host='0.0.0.0', port=port)

def keep_alive():
    t = Thread(target=run_server)
    t.start()


# ------------------------------------------------------------------------
# 3) –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# ------------------------------------------------------------------------
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s'
)


# ------------------------------------------------------------------------
# 4) –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•
# ------------------------------------------------------------------------
users_in_chat = {}       # { user_id: {...} }
users_history = {}       # { user_id: {...} }
parted_users = []        # [(nick, code, time), ...]
private_messages = {}    # { user_id: [ { from, text }, ... ] }
user_notify_settings = {}# { user_id: {...} }
polls = {}               # { creator_id: {...} }
admin_ids = set()
moderator_ids = set()


# ------------------------------------------------------------------------
# 5) –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ------------------------------------------------------------------------
def generate_nickname():
    """–°–ª—É—á–∞–π–Ω—ã–π –Ω–∏–∫."""
    return f"üë§{''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', k=6))}"

def generate_personal_code():
    """–°–ª—É—á–∞–π–Ω—ã–π –∫–æ–¥ –≤–∏–¥–∞ #XXXX."""
    return f"#{''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ', k=4))}"

def ensure_user_in_dicts(user_id: int):
    """–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ª–∏—á–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω–µ—Ç."""
    if user_id not in private_messages:
        private_messages[user_id] = []
    if user_id not in user_notify_settings:
        user_notify_settings[user_id] = {
            "privates": False,
            "replies": False,
            "hug": False,
            "interval": 5,
        }

def get_user_role(user_id: int) -> str:
    """–†–æ–ª—å: admin | moderator | new | resident"""
    if user_id in admin_ids:
        return "admin"
    if user_id in moderator_ids:
        return "moderator"
    if user_id in users_history:
        c = users_history[user_id].get("join_count", 0)
        return "new" if c <= 1 else "resident"
    return "new"

def get_moon_symbol(seconds_diff: float) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º ¬´–ª—É–Ω—É¬ª –ø–æ –¥–∞–≤–Ω–æ—Å—Ç–∏.
    < 60 -> üåï
    < 300 -> üåñ
    < 900 -> üåó
    < 1800 -> üåò
    >= 1800 -> üåë
    """
    if seconds_diff < 60:
        return "üåï"
    elif seconds_diff < 300:
        return "üåñ"
    elif seconds_diff < 900:
        return "üåó"
    elif seconds_diff < 1800:
        return "üåò"
    else:
        return "üåë"

def get_user_by_code(code: str):
    """–ù–∞–π—Ç–∏ user_id –ø–æ –∫–æ–¥—É."""
    for u_id, data in users_in_chat.items():
        if data["code"].lower() == code.lower():
            return u_id
    return None

def update_last_activity(user_id: int):
    """–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    if user_id in users_in_chat:
        users_in_chat[user_id]["last_activity"] = datetime.datetime.now()


# –®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def broadcast_text(telegram_app, text: str, exclude_user: int = None):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤—Å–µ–º, –∫—Ä–æ–º–µ exclude_user."""
    for uid, info in users_in_chat.items():
        if uid == exclude_user:
            continue
        try:
            await telegram_app.bot.send_message(chat_id=info["chat_id"], text=text)
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ {info['nickname']}: {e}")


# –®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ
async def broadcast_photo(telegram_app, photo_file_id: str, caption: str = "", exclude_user: int = None):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ –≤—Å–µ–º, –∫—Ä–æ–º–µ exclude_user."""
    for uid, info in users_in_chat.items():
        if uid == exclude_user:
            continue
        try:
            await telegram_app.bot.send_photo(
                chat_id=info["chat_id"],
                photo=photo_file_id,
                caption=caption
            )
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {info['nickname']}: {e}")


def parse_replied_nickname(bot_message_text: str) -> str:
    """
    –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –±–æ—Ç–∞ –µ—Å—Ç—å ¬´NickName: ...¬ª, –≤–µ—Ä–Ω—ë–º NickName,
    –∏–Ω–∞—á–µ –≤–µ—Ä–Ω—ë–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
    """
    m = re.match(r"^(.+?):\s", bot_message_text)
    if not m:
        return ""
    return m.group(1).strip()


# ------------------------------------------------------------------------
# 6) –•–ï–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î: /start, /stop
# ------------------------------------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    ensure_user_in_dicts(user_id)

    if user_id in users_in_chat:
        nickname = users_in_chat[user_id]["nickname"]
        await update.message.reply_text(
            f"[BOT] –¢—ã —É–∂–µ –≤ —á–∞—Ç–µ –ø–æ–¥ –Ω–∏–∫–æ–º ¬´{nickname}¬ª. –î–ª—è –≤—ã—Ö–æ–¥–∞ ‚Äî /stop."
        )
        update_last_activity(user_id)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ö–æ–¥–∏–ª —Ä–∞–Ω–µ–µ
    if user_id in users_history:
        nickname = users_history[user_id]["nickname"]
        code = users_history[user_id]["code"]
        users_history[user_id]["join_count"] = users_history[user_id].get("join_count", 0) + 1
        join_count = users_history[user_id]["join_count"]
    else:
        # –ü–µ—Ä–≤—ã–π —Ä–∞–∑
        nickname = generate_nickname()
        code = generate_personal_code()
        users_history[user_id] = {
            "nickname": nickname,
            "code": code,
            "join_count": 1
        }
        join_count = 1

    # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫
    users_in_chat[user_id] = {
        "nickname": nickname,
        "code": code,
        "chat_id": chat_id,
        "last_activity": datetime.datetime.now()
    }

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(
        f"[BOT] –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –¥–ª—è –ª—é–¥–µ–π, —Å—Ç–æ–ª–∫–Ω—É–≤—à–∏—Ö—Å—è —Å –æ–Ω–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ–º. –≠—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –≤–∑–∞–∏–º–æ–ø–æ–º–æ—â–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ü–æ–¥–µ–ª–∏—Å—å —Å —á–∞—Ç–æ–º, –∞ —á–∞—Ç –ø–æ–¥–µ–ª–∏—Ç—Å—è —Å —Ç–æ–±–æ–π! üòä \n"
        "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ ‚Äî /stop.\n\n"
        f"–¢–≤–æ–π –Ω–∏–∫: {nickname}\n"
        f"–¢–≤–æ–π –∫–æ–¥: {code}\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!"
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç –æ –≤—Ö–æ–¥–µ
    if join_count == 1:
        msg_broadcast = f"[Bot] {code} {nickname} –≤—Ö–æ–¥–∏—Ç –≤ —á–∞—Ç. –û–Ω –Ω–æ–≤–µ–Ω—å–∫–∏–π!"
    else:
        msg_broadcast = f"[Bot] {code} {nickname} –≤—Ö–æ–¥–∏—Ç –≤ —á–∞—Ç."

    await broadcast_text(context.application, msg_broadcast, exclude_user=user_id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} => {nickname} (join_count={join_count}).")


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users_in_chat:
        await update.message.reply_text("[BOT] –¢–µ–±—è –Ω–µ—Ç –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π /start, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏.")
        return

    nickname = users_in_chat[user_id]["nickname"]
    code = users_in_chat[user_id]["code"]
    users_in_chat.pop(user_id, None)

    parted_users.insert(0, (nickname, code, datetime.datetime.now()))
    if len(parted_users) > 20:
        parted_users.pop()

    await update.message.reply_text("[BOT] –¢—ã –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ /start.")
    await broadcast_text(context.application, f"[Bot] {code} {nickname} –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞.", exclude_user=user_id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (¬´{nickname}¬ª) –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞.")


# ------------------------------------------------------------------------
# 7) –°–ú–ï–ù–ê –ù–ò–ö–ê /nick (ConversationHandler)
# ------------------------------------------------------------------------
NICK_WAITING = range(1)

async def nick_command_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users_in_chat:
        await update.message.reply_text("[BOT] –¢–µ–±—è –Ω–µ—Ç –≤ —á–∞—Ç–µ. /start, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏.")
        return ConversationHandler.END

    await update.message.reply_text("[BOT] –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    return NICK_WAITING

async def nick_new_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users_in_chat:
        await update.message.reply_text("[BOT] –¢—ã —É–∂–µ –≤—ã—à–µ–ª –∏–ª–∏ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª.")
        return ConversationHandler.END

    new_nick = update.message.text.strip()
    if len(new_nick) > 15:
        await update.message.reply_text("[BOT] –ù–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å 15 —Å–∏–º–≤–æ–ª–æ–≤).")
        return ConversationHandler.END

    old_nick = users_in_chat[user_id]["nickname"]
    code = users_in_chat[user_id]["code"]

    users_in_chat[user_id]["nickname"] = new_nick
    users_history[user_id]["nickname"] = new_nick

    await update.message.reply_text(f"[BOT] –ù–æ–≤—ã–π –Ω–∏–∫: {new_nick}.")
    await broadcast_text(context.application, f"[Bot] {code} {old_nick} —Å–º–µ–Ω–∏–ª(–∞) –Ω–∏–∫ –Ω–∞ {new_nick}.")
    update_last_activity(user_id)
    logging.info(f"{user_id} —Å–º–µ–Ω–∏–ª –Ω–∏–∫ —Å {old_nick} –Ω–∞ {new_nick}.")
    return ConversationHandler.END

async def nick_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("[BOT] –û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# ------------------------------------------------------------------------
# 8) /list, /last
# ------------------------------------------------------------------------
async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not users_in_chat:
        await update.message.reply_text("[BOT] –í —á–∞—Ç–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.")
        return

    total_possible = 100  # –®—É—Ç–ª–∏–≤–æ–µ —á–∏—Å–ª–æ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ :)
    lines = []
    now = datetime.datetime.now()

    for uid, data in users_in_chat.items():
        diff_sec = (now - data["last_activity"]).total_seconds()
        moon = get_moon_symbol(diff_sec)
        role = get_user_role(uid)
        code = data["code"]
        nick = data["nickname"]
        line = f"{moon} {role} {code} {nick}"
        lines.append(line)

    msg = f"[BOT] –í —á–∞—Ç–µ {len(users_in_chat)} (–∏–∑ {total_possible}):\n" + "\n".join(lines)
    await update.message.reply_text(msg)
    update_last_activity(update.effective_user.id)


# ------------------------------------------------------------------------
# 9) /help, /rules, /about, /ping
# ------------------------------------------------------------------------
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (
        "[BOT] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –í–æ–π—Ç–∏ –≤ —á–∞—Ç\n"
        "/stop - –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞\n"
        "/nick - –°–º–µ–Ω–∏—Ç—å –Ω–∏–∫\n"
        "/list - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/msg - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/getmsg - –ü–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "/hug [CODE] - –û–±–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/search [–¢–ï–ö–°–¢] - –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É\n"
        "/poll - –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å\n"
        "/polldone - –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å\n"
        "/notify - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ—Ç–∞\n"
        "/rules - –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞\n"
        "/about - –û –±–æ—Ç–µ\n\n"
        "–î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π ¬´–æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞¬ª –Ω–∞—á–∏–Ω–∞–π —Å—Ç—Ä–æ–∫—É —Å–æ –∑–Ω–∞–∫–∞ %. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!"
    )
    await update.message.reply_text(txt)
    update_last_activity(update.effective_user.id)

async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (
        "[BOT] –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:\n\n"
        "üòä–ú—ã –∑–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–µ –∏ —É—é—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞—à–µ–≥–æ –∫–æ–º—å—é–Ω–∏—Ç–∏ –∏ –ø—Ä–∏–∑—ã–≤–∞–µ–º –í–∞—Å —Å–æ–±–ª—é–¥–∞—Ç—å –ø–æ—Ä—è–¥–∫–∏, —É—Å—Ç–æ–∏ –∏ –Ω–∞—à–∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏.\n\n"
        "üî∏–ó–∞–ø—Ä–µ—â–µ–Ω—ã –ø—Ä–∏–∑—ã–≤—ã –≤ –ª–∏—á–∫—É, –≤—ã–ø—Ä–∞—à–∏–≤–∞–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–∏—Ö.\n"
        "üî∏–§–ª–∏—Ä—Ç, –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –¥–µ–≤—É—à–µ–∫ –∏ –∑–∞–∑—ã–≤—ã –∏—Ö –≤ –ª–∏—á–∫—É.\n"
        "üî∏–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ª–∏—á–Ω–æ—Å—Ç–∏.\n"
        "üî∏–ó–∞–ø—Ä–µ—â–µ–Ω –º–∞—Ç –∏ –æ–±–µ—Å—Ü–µ–Ω–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ (–†–µ–∑–∏–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç —Å–∫—Ä—ã–≤–∞—Ç—å –º–∞—Ç –ø–æ–¥ —Å–ø–æ–π–ª–µ—Ä).\n"
        "üî∏–ó–∞–ø—Ä–µ—â–µ–Ω —Ñ–ª—É–¥ –∏ –ø–æ—Ç–æ–∫ –±–µ—Å—Å–≤—è–∑–Ω–æ–≥–æ –±—Ä–µ–¥–∞.\n"
        "üî∏–ö–æ–Ω—Ç–µ–Ω—Ç —à–æ–∫–∏—Ä—É—é—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞, –ø–æ—Ä–Ω–æ –∏ –¥—Ä—É–≥–∞—è –∑–∞–ø—Ä–µ—â–µ–Ω–∫–∞.\n"
        "üî∏–û–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–µ.\n"
        "üî∏–†–µ–∫–ª–∞–º–∞, —Å–ø–∞–º –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã.\n"
        "üî∏–†–∞–∑–∂–∏–≥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤, –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏, —Å–ø–æ—Ä—ã –Ω–∞ —Ç–µ–º—É –ø–æ–ª–∏—Ç–∏–∫–∏ –∏ —Ä–µ–ª–∏–≥–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.\n\n"
        "‚ùóÔ∏è–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é –ø—Ä–∏–º–µ–Ω—è—Ç—å –º–µ—Ä—ã –Ω–∞–∫–∞–∑–∞–Ω–∏—è. –ù–µ–∑–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –í–∞—Å –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.\n\n"
        "–†–∞–¥—ã –∫–∞–∂–¥–æ–º—É –∏–∑ –í–∞—Å. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ß–∞—Ç!"
    )
    await update.message.reply_text(txt)
    update_last_activity(update.effective_user.id)

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("[BOT] –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!")
    update_last_activity(update.effective_user.id)

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Pong!")
    update_last_activity(update.effective_user.id)


# ------------------------------------------------------------------------
# 10) –õ–ò–ß–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø /msg
# ------------------------------------------------------------------------
MSG_SELECT_RECIPIENT, MSG_ENTER_TEXT = range(2)

async def msg_command_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users_in_chat:
        await update.message.reply_text("[BOT] –¢–µ–±—è –Ω–µ—Ç –≤ —á–∞—Ç–µ. /start, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏.")
        return ConversationHandler.END

    # –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ /msg CODE —Ç–µ–∫—Å—Ç
    if len(context.args) >= 2:
        code = context.args[0]
        text_msg = " ".join(context.args[1:])
        to_user = get_user_by_code(code)
        if to_user is None:
            await update.message.reply_text("[BOT] –ù–µ –Ω–∞—à–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º.")
            return ConversationHandler.END

        from_nick = users_in_chat[user_id]["nickname"]
        ensure_user_in_dicts(to_user)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é
        private_messages[to_user].append({"from": from_nick, "text": text_msg})

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é —Å—Ä–∞–∑—É
        chat_to = users_in_chat[to_user]["chat_id"]
        await context.application.bot.send_message(
            chat_id=chat_to,
            text=f"[–õ–° –æ—Ç {from_nick}]: {text_msg}"
        )

        await update.message.reply_text(f"[BOT] –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {code}.")
        update_last_activity(user_id)
        return ConversationHandler.END

    # –∏–Ω–∞—á–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å inline-—Å–ø–∏—Å–æ–∫ (–∫–Ω–æ–ø–æ—á–∫–∏) –≤—Å–µ—Ö
    keyboard = []
    row = []
    i = 0
    for uid, data in users_in_chat.items():
        if uid == user_id:
            continue
        i += 1
        btn_text = f"{data['code']} {data['nickname']}"
        row.append(InlineKeyboardButton(btn_text, callback_data=f"msg_select|{uid}"))
        if i % 3 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="msg_cancel")])
    await update.message.reply_text(
        "[BOT] –í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    update_last_activity(user_id)
    return MSG_SELECT_RECIPIENT

async def msg_callback_select_recipient(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    parts = query.data.split("|")
    if len(parts) != 2:
        await query.answer("–û—à–∏–±–∫–∞.")
        return ConversationHandler.END

    recipient_id = int(parts[1])
    context.user_data["msg_recipient"] = recipient_id

    code_to = users_in_chat[recipient_id]["code"]
    nick_to = users_in_chat[recipient_id]["nickname"]

    await query.message.edit_text(
        f"[BOT] –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {code_to} {nick_to}."
    )
    await query.answer()
    return MSG_ENTER_TEXT

async def msg_enter_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if "msg_recipient" not in context.user_data:
        await update.message.reply_text("[BOT] –û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
        return ConversationHandler.END

    recipient_id = context.user_data["msg_recipient"]
    if recipient_id not in users_in_chat:
        await update.message.reply_text("[BOT] –ü–æ—Ö–æ–∂–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª.")
        return ConversationHandler.END

    from_nick = users_in_chat[user_id]["nickname"]
    text_msg = update.message.text

    to_code = users_in_chat[recipient_id]["code"]
    to_nick = users_in_chat[recipient_id]["nickname"]

    ensure_user_in_dicts(recipient_id)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é
    private_messages[recipient_id].append({"from": from_nick, "text": text_msg})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    chat_to = users_in_chat[recipient_id]["chat_id"]
    await context.application.bot.send_message(
        chat_id=chat_to,
        text=f"[–õ–° –æ—Ç {from_nick}]: {text_msg}"
    )

    await update.message.reply_text(
        f"[BOT] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {to_code} {to_nick} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
    )
    logging.info(f"–õ–°: {from_nick} -> {to_nick}: {text_msg}")

    context.user_data.pop("msg_recipient", None)
    update_last_activity(user_id)
    return ConversationHandler.END

async def msg_callback_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –õ–° –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await query.answer()
    return ConversationHandler.END

async def getmsg_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users_in_chat:
        await update.message.reply_text("[BOT] –¢–µ–±—è –Ω–µ—Ç –≤ —á–∞—Ç–µ.")
        return

    ensure_user_in_dicts(user_id)
    msgs = private_messages[user_id]
    if not msgs:
        await update.message.reply_text("[BOT] –£ —Ç–µ–±—è –Ω–µ—Ç –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return

    lines = []
    for m in msgs:
        lines.append(f"–û—Ç {m['from']}: {m['text']}")
    text = "[BOT] –¢–≤–æ–∏ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–æ–ø–∏—è):\n\n" + "\n".join(lines)
    await update.message.reply_text(text)
    update_last_activity(user_id)


# ------------------------------------------------------------------------
# 11) /hug
# ------------------------------------------------------------------------
HUG_SELECT = range(1)

async def hug_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users_in_chat:
        await update.message.reply_text("[BOT] –¢–µ–±—è –Ω–µ—Ç –≤ —á–∞—Ç–µ.")
        return ConversationHandler.END

    # –ï—Å–ª–∏ /hug CODE
    if context.args:
        code = context.args[0]
        to_user = get_user_by_code(code)
        if not to_user:
            await update.message.reply_text("[BOT] –ù–µ –Ω–∞—à–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º.")
            return ConversationHandler.END

        from_nick = users_in_chat[user_id]["nickname"]
        from_code = users_in_chat[user_id]["code"]
        to_nick = users_in_chat[to_user]["nickname"]
        text = f"[Bot] {from_code} {from_nick} –æ–±–Ω—è–ª(–∞) {to_nick}!"
        await broadcast_text(context.application, text)
        update_last_activity(user_id)
        return ConversationHandler.END

    # –ò–Ω–∞—á–µ inline-—Å–ø–∏—Å–æ–∫
    keyboard = []
    row = []
    i = 0
    for uid, data in users_in_chat.items():
        if uid == user_id:
            continue
        i += 1
        btn_text = f"{data['code']} {data['nickname']}"
        row.append(InlineKeyboardButton(btn_text, callback_data=f"hug_select|{uid}"))
        if i % 3 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="hug_cancel")])
    await update.message.reply_text(
        "[BOT] –í—ã–±–µ—Ä–∏, –∫–æ–≥–æ –æ–±–Ω—è—Ç—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    update_last_activity(user_id)
    return HUG_SELECT

async def hug_select_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    parts = query.data.split("|")
    if len(parts) != 2:
        await query.answer("–û—à–∏–±–∫–∞.")
        return ConversationHandler.END

    to_user_id = int(parts[1])
    from_nick = users_in_chat[user_id]["nickname"]
    from_code = users_in_chat[user_id]["code"]
    to_nick = users_in_chat[to_user_id]["nickname"]

    text = f"[Bot] {from_code} {from_nick} –æ–±–Ω—è–ª(–∞) {to_nick}!"
    await broadcast_text(context.application, text)
    await query.message.edit_text("–û–±–Ω–∏–º–∞—à–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    await query.answer()
    update_last_activity(user_id)
    return ConversationHandler.END

async def hug_cancel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.edit_text("–û–±–Ω–∏–º–∞—à–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.")
    await query.answer()
    return ConversationHandler.END


# ------------------------------------------------------------------------
# 12) /search
# ------------------------------------------------------------------------
async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users_in_chat:
        await update.message.reply_text("[BOT] –¢–µ–±—è –Ω–µ—Ç –≤ —á–∞—Ç–µ.")
        return

    if not context.args:
        await update.message.reply_text("[BOT] /search <—Ç–µ–∫—Å—Ç> ‚Äî –ø–æ–∏—Å–∫ –≤ –Ω–∏–∫–µ.")
        return

    pattern = " ".join(context.args).lower()
    results = []
    for uid, info in users_in_chat.items():
        if pattern in info["nickname"].lower():
            results.append(f"{info['code']} {info['nickname']}")

    if results:
        await update.message.reply_text("[BOT] –ù–∞–π–¥–µ–Ω—ã:\n" + "\n".join(results))
    else:
        await update.message.reply_text("[BOT] –ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∏.")
    update_last_activity(user_id)


# ------------------------------------------------------------------------
# 13) /poll
# ------------------------------------------------------------------------
POLL_AWAITING_QUESTION = range(1)

async def poll_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users_in_chat:
        await update.message.reply_text("[BOT] –¢–µ–±—è –Ω–µ—Ç –≤ —á–∞—Ç–µ.")
        return ConversationHandler.END

    await update.message.reply_text(
        "[BOT] –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å.\n\n"
        "–í–≤–µ–¥–∏ –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞, –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
        "–ß—Ç–æ –¥–µ–ª–∞—Ç—å?\n"
        "–í–∞—Ä–∏–∞–Ω—Ç1\n"
        "–í–∞—Ä–∏–∞–Ω—Ç2\n"
        "/cancel —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å."
    )
    update_last_activity(user_id)
    return POLL_AWAITING_QUESTION

async def poll_received_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users_in_chat:
        return ConversationHandler.END

    text = update.message.text.strip()
    lines = text.split("\n")
    if len(lines) < 2:
        await update.message.reply_text("[BOT] –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1 –≤–æ–ø—Ä–æ—Å –∏ 1 –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞.")
        return ConversationHandler.END

    question = lines[0]
    options = lines[1:]

    polls[user_id] = {
        "question": question,
        "options": options,
        "votes": {opt: set() for opt in options},
        "active": True,
        "message_ids": {},
        "chat_ids": {}
    }

    from_nick = users_in_chat[user_id]["nickname"]
    from_code = users_in_chat[user_id]["code"]
    header_text = f"[Bot] {from_code} {from_nick} –ø–æ—Å—Ç–∞–≤–∏–ª(–∞) –≤–æ–ø—Ä–æ—Å:\n{question}"

    def build_poll_keyboard(creator_id):
        kb = []
        for i, opt in enumerate(options, start=1):
            callback_data = f"pollvote|{creator_id}|{i}"
            btn_text = f"{i} - {opt}"
            kb.append([InlineKeyboardButton(btn_text, callback_data=callback_data)])
        return InlineKeyboardMarkup(kb)

    markup = build_poll_keyboard(user_id)
    for uid, info in users_in_chat.items():
        try:
            msg = await context.application.bot.send_message(
                chat_id=info["chat_id"],
                text=header_text,
                reply_markup=markup
            )
            polls[user_id]["message_ids"][uid] = msg.message_id
            polls[user_id]["chat_ids"][uid] = info["chat_id"]
        except Exception as e:
            logging.warning(f"–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å {info['nickname']}: {e}")

    update_last_activity(user_id)
    return ConversationHandler.END

async def poll_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("[BOT] –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

async def poll_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in polls or not polls[user_id]["active"]:
        await update.message.reply_text("[BOT] –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.")
        return

    polls[user_id]["active"] = False
    await update.message.reply_text("[BOT] –¢–≤–æ–π –æ–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω.")

    # –£–±–µ—Ä—ë–º –∫–Ω–æ–ø–∫–∏ —É –≤—Å–µ—Ö
    for uid, msg_id in polls[user_id]["message_ids"].items():
        chat_id = polls[user_id]["chat_ids"][uid]
        try:
            await context.application.bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=msg_id,
                reply_markup=None
            )
        except:
            pass

    update_last_activity(user_id)

async def poll_vote_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    parts = query.data.split("|")
    if len(parts) != 3 or parts[0] != "pollvote":
        await query.answer("–û—à–∏–±–∫–∞.")
        return

    creator_id = int(parts[1])
    opt_index = int(parts[2]) - 1
    user_id = update.effective_user.id

    if creator_id not in polls:
        await query.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        return
    poll_data = polls[creator_id]
    if not poll_data["active"]:
        await query.answer("–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω.")
        return

    options = poll_data["options"]
    if opt_index < 0 or opt_index >= len(options):
        await query.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.")
        return

    chosen_opt = options[opt_index]
    # –°–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≥–æ–ª–æ—Å–∞
    for opt in options:
        if user_id in poll_data["votes"][opt]:
            poll_data["votes"][opt].remove(user_id)
    poll_data["votes"][chosen_opt].add(user_id)
    await query.answer("–ì–æ–ª–æ—Å —É—á—Ç—ë–Ω!")

    # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
    question = poll_data["question"]
    out_lines = [question]
    for i, opt in enumerate(options, start=1):
        c = len(poll_data["votes"][opt])
        mark = "‚úîÔ∏è" if c > 0 else f"{i}"
        out_lines.append(f"{mark} - {opt} ({c})")

    new_text = "\n".join(out_lines)
    # –û–±–Ω–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –≤—Å–µ—Ö
    for uid, msg_id in poll_data["message_ids"].items():
        chat_id = poll_data["chat_ids"][uid]
        try:
            await context.application.bot.edit_message_text(
                chat_id=chat_id,
                message_id=msg_id,
                text=new_text,
                reply_markup=query.message.reply_markup
            )
        except Exception as e:
            logging.warning(f"–ù–µ —Å–º–æ–≥ –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø—Ä–æ—Å –¥–ª—è {uid}: {e}")

    update_last_activity(user_id)


# ------------------------------------------------------------------------
# 14) /notify (–¥–µ–º–æ)
# ------------------------------------------------------------------------
def build_notify_keyboard(user_id: int):
    s = user_notify_settings[user_id]
    def on_off(flag: bool):
        return "‚úÖ" if flag else "‚ùå"

    kb = [
      [
        InlineKeyboardButton(f"{on_off(s['privates'])} –õ–°", callback_data="notify|privates"),
        InlineKeyboardButton(f"{on_off(s['replies'])} –û—Ç–≤–µ—Ç—ã", callback_data="notify|replies"),
        InlineKeyboardButton(f"{on_off(s['hug'])} –û–±–Ω–∏–º–∞—à–∫–∏", callback_data="notify|hug"),
      ],
    ]
    row = []
    for val in [0, 1, 5, 10, 20, 30]:
        mark = "‚úÖ" if s['interval'] == val else "‚ùå"
        row.append(InlineKeyboardButton(f"{mark} {val}", callback_data=f"notify|interval|{val}"))
    kb.append(row)
    kb.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="notify|cancel")])
    return InlineKeyboardMarkup(kb)

async def notify_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users_in_chat:
        await update.message.reply_text("[BOT] –¢–µ–±—è –Ω–µ—Ç –≤ —á–∞—Ç–µ.")
        return

    ensure_user_in_dicts(user_id)
    kb = build_notify_keyboard(user_id)
    await update.message.reply_text("[BOT] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=kb)
    update_last_activity(user_id)

async def notify_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    parts = query.data.split("|")
    if parts[0] != "notify":
        return

    if len(parts) == 2:
        if parts[1] == "cancel":
            await query.message.delete()
            return
        k = parts[1]
        user_notify_settings[user_id][k] = not user_notify_settings[user_id][k]
    elif len(parts) == 3 and parts[1] == "interval":
        val = int(parts[2])
        user_notify_settings[user_id]["interval"] = val
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä.")
        return

    new_kb = build_notify_keyboard(user_id)
    try:
        await query.message.edit_reply_markup(new_kb)
    except:
        pass
    await query.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    update_last_activity(user_id)


# ------------------------------------------------------------------------
# 15) –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô (—Ç–µ–∫—Å—Ç + —Ñ–æ—Ç–æ)
# ------------------------------------------------------------------------
async def anonymous_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users_in_chat:
        await update.message.reply_text("[BOT] –¢–µ–±—è –Ω–µ—Ç –≤ —á–∞—Ç–µ. /start, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏.")
        return

    nickname = users_in_chat[user_id]["nickname"]
    code = users_in_chat[user_id]["code"]

    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ
    if update.message.photo:
        photo = update.message.photo[-1]
        file_id = photo.file_id
        caption = update.message.caption if update.message.caption else ""
        full_caption = f"{code} {nickname} –ø—Ä–∏—Å–ª–∞–ª(–∞) —Ñ–æ—Ç–æ"
        if caption:
            full_caption += f"\n{caption}"

        await broadcast_photo(context.application, file_id, caption=full_caption, exclude_user=user_id)
        update_last_activity(user_id)
        return

    # –ò–Ω–∞—á–µ —Ç–µ–∫—Å—Ç
    text = update.message.text.strip()
    replied_nick = ""
    if update.message.reply_to_message and update.message.reply_to_message.from_user.id == context.application.bot.id:
        replied_nick = parse_replied_nickname(update.message.reply_to_message.text)

    if text.startswith("%"):
        # –¢—Ä–µ—Ç—å–µ –ª–∏—Ü–æ
        out_text = text[1:].lstrip()
        if replied_nick:
            final_text = f"{nickname} (reply to {replied_nick}) {out_text}"
        else:
            final_text = f"{nickname} {out_text}"
        await broadcast_text(context.application, final_text, exclude_user=user_id)
    else:
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if replied_nick:
            final_text = f"{nickname} (reply to {replied_nick}): {text}"
        else:
            final_text = f"{nickname}: {text}"
        await broadcast_text(context.application, final_text, exclude_user=user_id)

    update_last_activity(user_id)


# ------------------------------------------------------------------------
# 16) –£–°–¢–ê–ù–û–í–ö–ê –ö–û–ú–ê–ù–î –î–õ–Ø –ú–ï–ù–Æ, post_init
# ------------------------------------------------------------------------
async def set_bot_commands(telegram_app):
    commands = [
        BotCommand("start", "–í–æ–π—Ç–∏ –≤ —á–∞—Ç"),
        BotCommand("stop", "–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞"),
        BotCommand("nick", "–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫"),
        BotCommand("list", "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        BotCommand("msg", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°"),
        BotCommand("getmsg", "–ü–æ–ª—É—á–∏—Ç—å –õ–°"),
        BotCommand("hug", "–û–±–Ω—è—Ç—å"),
        BotCommand("search", "–ü–æ–∏—Å–∫ –ø–æ –Ω–∏–∫—É"),
        BotCommand("poll", "–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"),
        BotCommand("polldone", "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å"),
        BotCommand("notify", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        BotCommand("ping", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞"),
        BotCommand("rules", "–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞"),
        BotCommand("about", "–û –±–æ—Ç–µ"),
        BotCommand("help", "–ü–æ–º–æ—â—å"),
    ]
    await telegram_app.bot.set_my_commands(commands)

async def post_init(telegram_app):
    await set_bot_commands(telegram_app)


# ------------------------------------------------------------------------
# 17) –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ------------------------------------------------------------------------
def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask (keep-alive) –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    keep_alive()

    # –°–æ–∑–¥–∞—ë–º Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    bot_app = ApplicationBuilder().token(BOT_TOKEN).build()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    # 1) Conversation /nick
    nick_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("nick", nick_command_start)],
        states={
            NICK_WAITING: [MessageHandler(filters.TEXT & ~filters.COMMAND, nick_new_name)],
        },
        fallbacks=[CommandHandler("cancel", nick_cancel)]
    )

    # 2) Conversation /poll
    poll_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("poll", poll_command)],
        states={
            POLL_AWAITING_QUESTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, poll_received_text)
            ],
        },
        fallbacks=[CommandHandler("cancel", poll_cancel)]
    )

    # 3) Conversation /msg
    msg_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("msg", msg_command_start)],
        states={
            MSG_SELECT_RECIPIENT: [
                CallbackQueryHandler(msg_callback_select_recipient, pattern="^msg_select\\|"),
                CallbackQueryHandler(msg_callback_cancel, pattern="^msg_cancel$")
            ],
            MSG_ENTER_TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, msg_enter_text),
            ],
        },
        fallbacks=[CallbackQueryHandler(msg_callback_cancel, pattern="^msg_cancel$")]
    )

    # 4) Conversation /hug
    hug_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("hug", hug_command)],
        states={
            HUG_SELECT: [
                CallbackQueryHandler(hug_select_callback, pattern="^hug_select\\|"),
                CallbackQueryHandler(hug_cancel_callback, pattern="^hug_cancel$")
            ],
        },
        fallbacks=[CallbackQueryHandler(hug_cancel_callback, pattern="^hug_cancel$")]
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    bot_app.add_handler(CommandHandler("start", start))
    bot_app.add_handler(CommandHandler("stop", stop))

    bot_app.add_handler(nick_conv_handler)
    bot_app.add_handler(CommandHandler("list", list_users))
    bot_app.add_handler(CommandHandler("help", help_command))
    bot_app.add_handler(CommandHandler("rules", rules))
    bot_app.add_handler(CommandHandler("about", about))
    bot_app.add_handler(CommandHandler("ping", ping))

    bot_app.add_handler(msg_conv_handler)
    bot_app.add_handler(CommandHandler("getmsg", getmsg_command))

    bot_app.add_handler(hug_conv_handler)
    bot_app.add_handler(CommandHandler("search", search_command))

    bot_app.add_handler(poll_conv_handler)
    bot_app.add_handler(CommandHandler("polldone", poll_done))

    bot_app.add_handler(CommandHandler("notify", notify_command))
    bot_app.add_handler(CallbackQueryHandler(notify_callback, pattern="^notify\\|"))

    bot_app.add_handler(CallbackQueryHandler(poll_vote_callback, pattern="^pollvote\\|"))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ)
    bot_app.add_handler(MessageHandler(~filters.COMMAND & (filters.TEXT | filters.PHOTO), anonymous_message))

    # post_init –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ /–∫–æ–º–∞–Ω–¥
    bot_app.post_init = post_init

    # –ó–∞–ø—É—Å–∫
    bot_app.run_polling()


# ------------------------------------------------------------------------
# –ó–∞–ø—É—Å–∫
# ------------------------------------------------------------------------
if __name__ == "__main__":
    main()
